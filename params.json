{"name":"Electron-compile","tagline":"Electron supporting package to compile JS and CSS in Electron applications","body":"## electron-compile\r\n\r\nelectron-compile compiles JS and CSS on the fly with a single call in your app's 'ready' function.\r\n\r\nFor JavaScript:\r\n\r\n* JavaScript ES6/ES7 (via Babel)\r\n* TypeScript\r\n* CoffeeScript\r\n\r\nFor CSS:\r\n\r\n* LESS\r\n\r\nFor HTML:\r\n\r\n* Jade\r\n\r\n### How does it work? (Easiest Way)\r\n\r\nChange your reference to `electron-prebuilt` to `electron-prebuilt-compile`. Tada! You did it.\r\n\r\n### Wait, seriously?\r\n\r\nYeah. `electron-prebuilt-compile` is like an `electron-prebuilt` that Just Works with all of these languages above.\r\n\r\n### How does it work? (Slightly Harder Way)\r\n\r\nFirst, add `electron-compile` and `electron-compilers` as a `devDependency`.\r\n\r\n```sh\r\nnpm install --save electron-compile\r\nnpm install --save-dev electron-compilers\r\n```\r\n\r\nCreate a new file that will be the entry point of your app (perhaps changing 'main' in package.json) - you need to pass in the root directory of your application, which will vary based on your setup. The root directory is the directory that your `package.json` is in.\r\n\r\n```js\r\n// Assuming this file is ./src/es6-init.js\r\nvar appRoot = path.join(__dirname, '..');\r\n\r\n// ...and that your main app is called ./src/main.js. This is written as if\r\n// you were going to `require` the file from here.\r\nrequire('electron-compile').init(appRoot, './main');\r\n```\r\n\r\n\r\n### I did it, now what?\r\n\r\nFrom then on, you can now simply include files directly in your HTML, no need for cross-compilation:\r\n\r\n```html\r\n<head>\r\n  <script type=\"text/coffeescript\" src=\"main.coffee\"></script>\r\n  <link rel=\"stylesheet\" type=\"text/less\" href=\"main.less\" />\r\n</head>\r\n```\r\n\r\nor just require them in:\r\n\r\n```js\r\nrequire('./mylib')   // mylib.ts\r\n```\r\n\r\n### How do I set up (Babel / LESS / whatever) the way I want?\r\n\r\nIf you've got a .babelrc and that's all you want to customize, you can simply use it directly. electron-compile will respect it, even the environment-specific settings. If you want to customize other compilers, use a `.compilerc` file. Here's an example:\r\n\r\n```js\r\n{\r\n  \"application/javascript\": {\r\n    \"presets\": [\"stage-0\", \"es2015\", \"react\"],\r\n    \"sourceMaps\": \"inline\"\r\n  },\r\n  \"text/less\": {\r\n    \"dumpLineNumbers\": \"comments\"\r\n  }\r\n}\r\n```\r\n\r\nThe opening Object is a list of MIME Types, and options passed to the compiler implementation. These parameters are documented here:\r\n\r\n* Babel - http://babeljs.io/docs/usage/options\r\n* CoffeeScript - http://coffeescript.org/documentation/docs/coffee-script.html#section-5\r\n* TypeScript - https://github.com/Microsoft/TypeScript/blob/v1.5.0-beta/bin/typescriptServices.d.ts#L1076 \r\n* LESS - http://lesscss.org/usage/index.html#command-line-usage-options\r\n* Jade - http://jade-lang.com/api\r\n\r\n## How can I precompile my code for release-time?\r\n\r\nelectron-compile comes with a command-line application to pre-create a cache for you.\r\n\r\n```sh\r\nUsage: electron-compile --appDir [root-app-dir] paths...\r\n\r\nOptions:\r\n  -a, --appdir  The top-level application directory (i.e. where your\r\n                package.json is)\r\n  -v, --verbose  Print verbose information\r\n  -h, --help     Show help\r\n```\r\n\r\nRun `electron-compile` on all of your application assets, even if they aren't strictly code (i.e. your static assets like PNGs). electron-compile will recursively walk the given directories.\r\n\r\n```sh\r\nelectron-compile --appDir . ./src ./static\r\n```\r\n\r\nCompilation also has its own API, check out the [documentation](LINK HERE) for more information.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}